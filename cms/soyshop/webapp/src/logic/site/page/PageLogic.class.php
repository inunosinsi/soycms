<?php

class PageLogic extends SOY2LogicBase{

	private $errors = array();

    function validate(SOYShop_Page $obj){

		$errors = array();

		if(strlen($obj->getName()) < 1){
			$errors["name"] = MessageManager::get("ERROR_REQUIRE");
		}

		if(!is_null($obj->getUri())){
			if(strlen($obj->getUri()) < 1){
				$errors["uri"] = MessageManager::get("ERROR_REQUIRE");
			}else if(!preg_match('/^[a-zA-Z0-9\.\/\_-]+$/', $obj->getUri())){
				$errors["uri"] = MessageManager::get("ERROR_INVALID");
			}else if(preg_match('/^user\/?/', $obj->getUri())){
				$errors["uri"] = MessageManager::get("ERROR_INVALID");
			}
		}

		if(strlen($obj->getType()) < 1){
			$errors["type"] = MessageManager::get("ERROR_REQUIRE");
		}


		$this->setErrors($errors);

		return (empty($errors));
    }

	/**
	 * @return int
	 */
	function countPage(){
		return count(self::_getAllPages());
	}

	/**
	 * @return array
	 */
	function getPageListByType(){
		$all = self::_getAllPages();

		$configs = array();
		$list = array();

		//多言語化サイトプラグインがアクティブの時
		if(SOYShopPluginUtil::checkIsActive("util_multi_language")){
			SOY2::import("module.plugins.util_multi_language.util.UtilMultiLanguageUtil");
			if(class_exists("UtilMultiLanguageUtil")){
				$multiLangConfig = UtilMultiLanguageUtil::getConfig();

				foreach($multiLangConfig as $key => $values){
					if(
						(isset($values["prefix"]) && strlen($values["prefix"])) &&
						(isset($values["is_use"]) && $values["is_use"] == UtilMultiLanguageUtil::IS_USE)
					){
						$configs[$key] = $values["prefix"];
					}
				}
			}
		}

		//携帯自動振り分けプラグインがアクティブの時
		if(SOYShopPluginUtil::checkIsActive("util_mobile_check")){
			SOY2::import("module.plugins.util_mobile_check.util.UtilMobileCheckUtil");
			if(class_exists("UtilMobileCheckUtil")){
				$mobileCheckConfig = UtilMobileCheckUtil::getConfig();

				if(isset($mobileCheckConfig["prefix"]) && strlen($mobileCheckConfig["prefix"])){
					$configs["m"] = $mobileCheckConfig["prefix"];
				}

				if(isset($mobileCheckConfig["prefix_i"]) && strlen($mobileCheckConfig["prefix_i"])){
					$configs["i"] = $mobileCheckConfig["prefix_i"];
				}

				//多言語化サイトと併用
				if(SOYShopPluginUtil::checkIsActive("util_multi_language") && class_exists("UtilMultiLanguageUtil")){
					foreach($multiLangConfig as $key => $values){
						if(
							(isset($values["prefix"]) && strlen($values["prefix"])) &&
							(isset($values["is_use"]) && $values["is_use"] == UtilMultiLanguageUtil::IS_USE)
						){
							$configs[$configs["i"] . "/" . $key] = $configs["i"] . "/" . $values["prefix"];
						}
					}
				}
			}
		}

		krsort($configs);

		foreach($configs as $key => $prefix){
			foreach($all as $page){
				if(strpos($prefix, "/") === false){
					if($page->getUri() == $prefix || preg_match('/^' . $prefix . '\//', $page->getUri())){
						$list[$prefix][$page->getUri()] = $page;
						unset($all[$page->getUri()]);
					}
				}else{
					if($page->getUri() == $prefix || strpos($page->getUri(), $prefix . "/") === 0){
						$list[$prefix][$page->getUri()] = $page;
						unset($all[$page->getUri()]);
					}
				}
			}
		}

		ksort($list);

		//最後に並べ替え
		$pageList["jp"] = $all;
		foreach($list as $key => $values){
			$pageList[$key] = $values;
		}

		return $pageList;
	}

	/**
	 * @return array
	 */
	private function _getAllPages(){
		static $_arr;
		if(is_array($_arr)) return $_arr;

		$_arr = array();

		$pages = soyshop_get_hash_table_dao("page")->get();
		if(!count($pages)) return array();

		foreach($pages as $page){
			$_arr[$page->getUri()] = $page;
		}

		ksort($_arr);
		return $_arr;
	}

    function update(SOYShop_Page $obj){
		soyshop_get_hash_table_dao("page")->update($obj);
		self::onUpdate($obj);
    }

    function onUpdate(SOYShop_Page $obj){
    	self::_generatePageDirectory($obj);
		self::updatePageObject($obj);
		self::_updatePageMapping();
    }

    function getErrors() {
    	return $this->errors;
    }
    function setErrors($errors) {
    	$this->errors = $errors;
    }

	function generatePageDirectory(SOYShop_Page $obj, $force = false){
		self::_generatePageDirectory($obj, $force);
	}

	/**
	 * ディレクトリを自動で生成する
	 */
    private function _generatePageDirectory(SOYShop_Page $obj, $force = false){

		/* プログラムファイル出力 */
		$classFilePath = SOYSHOP_SITE_DIRECTORY . ".page/" . $obj->getCustomClassFileName();
		if(!file_exists($classFilePath) || $force){
			$code = file_get_contents(dirname(__FILE__) . "/default/default.php");

			//replace
			$code = str_replace("%class%", $obj->getCustomClassName(), $code);
			$code = str_replace("%baseclass%", $obj->getBaseClassName(), $code);

			$header = "<?php //generated by soyshop " . date("Y-m-d H:i:s") . "\n\n";
			$footer = "\n\n?>";
			file_put_contents($classFilePath, $header . $code . $footer);
		}
	}

	/**
	 * generate css file
	 */
	private function _generateCSSFile(SOYShop_Page $obj, bool $force = false){
		/* CSSの出力 */
    	$uri = $obj->getUri();

		$size = strlen ($uri);
    	$pos = strpos (strrev($uri), "/");

		$dir = ($pos) ? substr($uri, 0, $size - $pos) : "";
		$start = ($pos) ? $size - $pos : 0;
		$file = substr($uri, $start);

		$targetDir = SOYSHOP_SITE_DIRECTORY . $dir;
		if(!file_exists($targetDir)){
			mkdir($targetDir, 0777, true);
		}

		$cssFile = $targetDir . "/" . preg_replace('/\.html$/', "", $file) . ".css";
		if(!file_exists($cssFile) || $force){
			file_put_contents($cssFile, file_get_contents(dirname(__FILE__) . "/default/default.css"));
		}
	}

	/**
	 * objectの保存
	 */
	function updatePageObject($page){
		$obj = $page->getPageObject();
		$plain = SOY2::cast("object", $obj);

		$filepath = SOYSHOP_SITE_DIRECTORY . ".page/" . $page->getCustomClassName() . ".conf";

		file_put_contents($filepath, json_encode($plain));
	}

	private function _updatePageMapping(){
		$pages = soyshop_get_hash_table_dao("page")->get();

		$mapping = array();
		foreach($pages as $id => $page){
			$mapping[$id] = array(
				"type" => $page->getType(),
				"uri" => $page->getUri()
			);
		}

		SOYShop_DataSets::put("site.url_mapping", $mapping);
	}

	//一番IDの小さい詳細ページを取得する
	function getOldestDetailPageId(){
		static $id;
		if(!is_numeric($id)) $id = soyshop_get_hash_table_dao("page")->getOldestDetailPageId();
		return $id;
	}
}
